{"version":3,"sources":["src/hooks/useColorScheme.ts","src/constants/Metrics.ts","src/components/WebBackButton.tsx","src/components/Logo.tsx","src/constants/Colors.ts","src/constants/Layout.ts","src/services/helpers-service.ts","src/styles/globalStyles.ts","src/components/Themed.tsx","src/components/TextInput.tsx","src/services/api-service.ts","src/store/authReducer.ts","src/store/coinsReducer.ts","src/store/index.ts","src/screens/LoginScreen.tsx","src/screens/NotFoundScreen.tsx","src/screens/RegisterScreen.tsx","src/components/CoinGraph.tsx","src/components/CoinItem.tsx","src/hooks/useReduxDispatch.ts","src/screens/ViewCoinScreen.tsx","src/screens/ExploreScreen.tsx","src/screens/MoveScreen.tsx","src/components/ListItem.tsx","src/components/UsdIcon.tsx","src/screens/PortifolioScreen.tsx","src/components/ListSubheader.tsx","src/screens/SettingsScreen.tsx","src/navigation/BottomTabNavigator.tsx","src/navigation/LinkingConfiguration.ts","src/navigation/index.tsx","App.tsx","src/hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","WebBackButton","tintColor","Pressable","style","paddingHorizontal","Metrics","onPress","window","history","back","Ionicons","name","size","color","defaultProps","undefined","Logo","props","viewBox","id","width","height","fill","clipPath","d","stroke","strokeWidth","cx","cy","r","fillOpacity","maskUnits","x","y","mask","transparent","success","Colors","danger","white","purple","light","text","background","tint","tabIconDefault","tabIconSelected","dark","Dimensions","get","isWeb","Platform","OS","isIOS","jsonConsole","i","length","console","log","JSON","stringify","hapticsLight","Haptics","Light","formatMoney","money","Intl","NumberFormat","currency","format","formatPercentage","toFixed","hexToRgbA","hex","c","opacity","test","substring","split","join","Error","StyleSheet","create","safeareaview","flex","containerVerticalCenter","input","inputError","lineHeight","marginLeft","button","marginBottom","justifyContent","card","elevation","borderRadius","shadowOffset","shadowOpacity","shadowRadius","cardDisabled","avatar","alignSelf","marginHorizontal","backgroundColor","content","padding","contentDescription","fontSize","letterSpacing","row","flexDirection","col","loadingContainer","minHeight","Layout","link","headerStyle","borderBottomWidth","headerTitleStyle","fontWeight","headerGreenStyle","headerTintColor","tabOptions","safeAreaInsets","bottom","showLabel","useThemeColor","colorName","theme","colorFromProps","Text","lightColor","darkColor","otherProps","View","Surface","themeStyle","shadowColor","globalStyles","LineChart","data","labels","datasets","withVerticalLabels","withHorizontalLabels","withDots","chartConfig","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","bezier","TextInput","label","error","colors","getErrorMessage","response","errors","Object","values","fields","message","api","token","apiLocal","axios","baseURL","headers","Accept","Authorization","interceptors","request","use","Promise","resolve","reject","authSlice","createSlice","initialState","user","email","api_token","loading","reducers","login","state","login_success","action","payload","login_error","logout","actions","selectAuth","auth","selecUser","selectApiToken","coinsSlice","list_coins","list_coins_success","list_coins_error","get_coin","get_coin_success","get_coin_error","listCoinsAsync","dispatch","then","catch","getCoinAsync","coin","period","params","selectCoinState","coins","reducer","storage","combineReducers","authReducer","coinsReducer","engine","createEngine","middleware","store","applyMiddleware","thunk","createStore","createStoreWithMiddleware","load","LoginScreen","useDispatch","navigation","useNavigation","useSelector","keyboardShouldPersistTaps","centerContent","contentContainerStyle","styles","scroll","SafeAreaView","logoContainer","logo","h1","initialValues","password","validationSchema","validations","validateOnChange","onSubmit","Keyboard","dismiss","post","setFieldValue","handleSubmit","keyboardType","textContentType","onChangeText","value","placeholder","onSubmitEditing","autoCapitalize","autoCompleteType","secureTextEntry","returnKeyType","Button","mode","disabled","CommonActions","reset","index","routes","register","uppercase","Yup","shape","required","marginTop","alignItems","overflow","textAlign","NotFoundScreen","container","title","TouchableOpacity","replace","linkText","paddingVertical","RegisterScreen","password_confirmation","oneOf","CoinGraph","ActivityIndicator","animating","position","absoluteFillObject","left","CoinItem","item","showGraphImage","coinname","titleStyle","description","descriptionStyle","source","uri","image_url","descriptionNumberOfLines","right","righComponent","Image","chartImage","symbol","price","usd_price","percentage","usd_change_pct_24_hours","maxWidth","maxHeight","resizeMode","minWidth","useReduxDispatch","ViewCoinScreen","route","useRoute","useState","setCoin","setData","setPeriod","refresh","_period","historic","map","h","close","React","topBackground","keys","key","renderActions","Title","Divider","usd_change_pct_hour","surface","edges","paddingTop","paddingBottom","SettingsScreen","refreshing","setRefreshing","onRefresh","finally","FlatList","refreshControl","RefreshControl","list","renderItem","Link","to","navigate","keyExtractor","toString","ListEmptyComponent","hidesWhenStopped","PortifolioScreen","amount","setAmount","colorScheme","setOptions","headerLeft","headerIcon","headerRight","listContent","ListHeaderComponent","localAmount","Number","slice","buttonRound","buttonText","numColumns","BUTTON_SIZE","ListItem","destructive","showDividers","icon","itemDestructive","titleLarge","titleDestructive","iconProps","margin","UsdIcon","setTimeout","rightComponent","IconButton","ScrollView","iconUsd","borderBottomLeftRadius","borderBottomRightRadius","marginRight","ListSubheader","children","ExploreScreen","DATA","url","WebBrowser","Linking","openURL","SectionList","sections","_","ListFooterComponent","renderSectionHeader","section","stickySectionHeadersEnabled","BottomTab","createBottomTabNavigator","BottomTabNavigator","Consumer","insets","Navigator","initialRouteName","tabBarOptions","activeTintColor","Screen","component","ExploreTab","options","tabBarIcon","TabBarIcon","PortifolioTab","MoveTab","SettingsTab","ExploreTabStack","createStackNavigator","SettingsTabStack","PortifolioTabStack","MoveTabStack","headerTitle","MoveScreen","prefixes","config","screens","Login","Register","Root","ViewCoin","path","parse","fullname","image","usd_change_pct_day","created_at","updated_at","NotFound","Navigation","NavigationContainer","linking","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","RootStack","PublicStack","headerShown","screenOptions","App","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","font","require","warn","useCachedResources","useEffect","useStore","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.41c7f356.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","export default {\n  base: 16,\n  radius: 8,\n  small: 12,\n  label: 16,\n  h1: 22,\n};\n","import * as React from 'react';\nimport { Pressable } from 'react-native';\n\nimport { Ionicons } from '@expo/vector-icons';\nimport Metrics from 'constants/Metrics';\n\nfunction WebBackButton({ tintColor }: { tintColor?: string }) {\n  return (\n    <Pressable style={{ paddingHorizontal: Metrics.base }} onPress={() => window.history.back()}>\n      <Ionicons name=\"arrow-back\" size={32} color={tintColor} />\n    </Pressable>\n  );\n}\n\nWebBackButton.defaultProps = { tintColor: undefined };\n\nexport default WebBackButton;\n","import * as React from 'react';\nimport Svg, { G, Defs, Rect, Path, Circle, Mask, ClipPath } from 'react-native-svg';\n\nfunction Logo(props: { width?: number; height?: number }) {\n  return (\n    <Svg {...props} viewBox=\"0 0 1024 1024\">\n      <Defs>\n        <ClipPath id=\"clip0\">\n          <Rect width=\"1024\" height=\"1024\" fill=\"white\" />\n        </ClipPath>\n      </Defs>\n\n      <G clipPath=\"url(#clip0)\">\n        <Rect width=\"1024\" height=\"1024\" fill=\"#F5F5F7\" />\n        <Path d=\"M855 -1V1024\" stroke=\"#DDDDE1\" strokeWidth=\"6\" />\n        <Path d=\"M684 -1V1024\" stroke=\"#DDDDE1\" strokeWidth=\"6\" />\n        <Path d=\"M513 -1V1024\" stroke=\"#DDDDE1\" strokeWidth=\"6\" />\n        <Path d=\"M342 -1V1024\" stroke=\"#DDDDE1\" strokeWidth=\"6\" />\n        <Path d=\"M171 -1V1024\" stroke=\"#DDDDE1\" strokeWidth=\"6\" />\n        <Path d=\"M1024 854L-1 854\" stroke=\"#DDDDE1\" strokeWidth=\"6\" />\n        <Path d=\"M1024 683L-1 683\" stroke=\"#DDDDE1\" strokeWidth=\"6\" />\n        <Path d=\"M1024 512L-1 512\" stroke=\"#DDDDE1\" strokeWidth=\"6\" />\n        <Path d=\"M1024 341L-1 341\" stroke=\"#DDDDE1\" strokeWidth=\"6\" />\n        <Path d=\"M1024 170L-1 170\" stroke=\"#DDDDE1\" strokeWidth=\"6\" />\n        <Circle cx=\"512\" cy=\"511\" r=\"337\" stroke=\"#CFCFD5\" strokeWidth=\"12\" />\n        <Circle cx=\"512\" cy=\"512\" r=\"166\" stroke=\"#CFCFD5\" strokeWidth=\"12\" />\n        <Circle cx=\"512\" cy=\"512\" r=\"438\" stroke=\"#CFCFD5\" strokeWidth=\"12\" />\n        <Rect width=\"1024\" height=\"1024\" fill=\"#21D23E\" />\n        <Path\n          d=\"M604.016 678.75H416.125L383.312 785H236.828L445.422 216.25H574.328L784.484 785H637.219L604.016 678.75ZM448.938 572.891H571.203L509.875 375.625L448.938 572.891Z\"\n          fill=\"white\"\n        />\n        <Circle cx=\"-137\" cy=\"-126\" r=\"1101\" fill=\"white\" fillOpacity=\"0.2\" />\n        <Mask\n          id=\"mask0\"\n          // maskType=\"alpha\"\n          maskUnits=\"userSpaceOnUse\"\n          x=\"0\"\n          y=\"0\"\n          width=\"1024\"\n          height=\"1024\"\n        >\n          <Rect width=\"1024\" height=\"1024\" fill=\"#21D23E\" />\n        </Mask>\n        <G mask=\"url(#mask0)\" />\n      </G>\n    </Svg>\n  );\n}\n\nLogo.defaultProps = { width: 1024, height: 1024 };\n\nexport default Logo;\n","import { Colors } from 'react-native-paper';\n\nexport const tintColorLight = '#21d23e';\nexport const tintColorDark = '#ffffff';\n\nexport default {\n  transparent: '#ffffff00',\n  success: Colors.green500,\n  danger: Colors.red800,\n  white: Colors.white,\n  purple: Colors.deepPurple400,\n  light: {\n    text: '#000000',\n    background: '#ffffff',\n    tint: tintColorLight,\n    tabIconDefault: '#cccccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#ffffff',\n    background: '#1e1e1e',\n    tint: tintColorDark,\n    tabIconDefault: '#cccccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import { Dimensions } from 'react-native';\n\nconst { width } = Dimensions.get('window');\nconst { height } = Dimensions.get('window');\n\nexport default {\n  window: {\n    width,\n    height,\n  },\n  isSmallDevice: width < 375,\n};\n","import { Linking, Platform } from 'react-native';\n\nimport { API_ENDPOINT } from '@env';\nimport * as Haptics from 'expo-haptics';\nimport * as WebBrowser from 'expo-web-browser';\n\nexport const isWeb = (): boolean => Platform.OS === 'web';\nexport const isIOS = (): boolean => Platform.OS === 'ios';\nexport const isAndroid = (): boolean => Platform.OS === 'android';\n\nexport function jsonConsole(...any: unknown[]): void {\n  for (let i = 0; i < any.length; i += 1) {\n    // eslint-disable-next-line no-console\n    console.log(JSON.stringify(any[i], null, 2));\n  }\n}\n\nexport function hapticsSelect(): void {\n  if (isIOS()) Haptics.selectionAsync();\n}\n\nexport function hapticsLight(): void {\n  if (isIOS()) Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n}\n\nexport function imageUrl(path: string): string {\n  const [baseUrl] = API_ENDPOINT.split('api');\n  return baseUrl + path;\n}\n\nexport function formatMoney(money: number): string {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n\n  return formatter.format(money);\n}\n\nexport function formatPercentage(money: number): string {\n  return `${money.toFixed(2)}%`;\n}\n\nexport function hexToRgbA(hex: string, opacity = 1): string {\n  let c;\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    c = hex.substring(1).split('');\n    if (c.length === 3) {\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n    }\n    c = `0x${c.join('')}`;\n    // eslint-disable-next-line no-bitwise\n    return `rgba(${[(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',')},${opacity})`;\n  }\n  throw new Error('Bad Hex');\n}\n\nexport function openUrl(url: string) {\n  return WebBrowser.openBrowserAsync(url).catch(() => Linking.openURL(url));\n}\n","import { StyleSheet } from 'react-native';\n\nimport { BottomTabBarOptions } from '@react-navigation/bottom-tabs';\nimport { StackNavigationOptions } from '@react-navigation/stack';\nimport Colors, { tintColorLight } from 'constants/Colors';\nimport Layout from 'constants/Layout';\nimport Metrics from 'constants/Metrics';\nimport { isIOS } from 'services/helpers-service';\n\nexport default StyleSheet.create({\n  safeareaview: {\n    flex: 1,\n  },\n  containerVerticalCenter: {\n    flex: 1,\n    paddingHorizontal: Metrics.base,\n  },\n  input: {\n    paddingHorizontal: 0,\n  },\n  inputError: {\n    color: Colors.danger,\n    height: 30,\n    lineHeight: 30,\n    marginLeft: isIOS() ? -4 : 0,\n  },\n  button: {\n    marginBottom: Metrics.base,\n    height: 56,\n    justifyContent: 'center',\n  },\n  card: {\n    elevation: 1,\n\n    borderRadius: Metrics.radius,\n\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 5.46,\n  },\n  cardDisabled: {\n    elevation: 0,\n    borderRadius: 0,\n    shadowOpacity: 0,\n  },\n  avatar: {\n    alignSelf: 'center',\n    marginHorizontal: Metrics.base / 3,\n    backgroundColor: 'transparent',\n  },\n  content: {\n    padding: Metrics.base,\n  },\n  contentDescription: {\n    fontSize: Metrics.label - 2,\n    opacity: 0.5,\n    letterSpacing: 0.1,\n    lineHeight: 20,\n  },\n  row: {\n    flexDirection: 'row',\n    marginHorizontal: Metrics.base * -0.5,\n  },\n  col: {\n    flex: 1,\n    paddingHorizontal: Metrics.base / 2,\n  },\n  loadingContainer: {\n    minHeight: Layout.window.height - 300,\n    justifyContent: 'center',\n  },\n  tint: { color: tintColorLight },\n  link: { width: '100%' },\n});\n\nexport const headerStyle: StackNavigationOptions = {\n  headerStyle: {\n    shadowOffset: {\n      width: 0,\n      height: 0,\n    },\n    borderBottomWidth: 0,\n  },\n  headerTitleStyle: {\n    fontWeight: '700',\n    letterSpacing: 1,\n  },\n};\n\nexport const headerGreenStyle: StackNavigationOptions = {\n  headerStyle: {\n    ...headerStyle.headerStyle,\n    backgroundColor: Colors.light.tint,\n  },\n  headerTintColor: Colors.white,\n};\n\nexport const tabOptions: BottomTabBarOptions = {\n  safeAreaInsets: {\n    bottom: 0,\n  },\n  style: {\n    height: 80,\n  },\n  showLabel: false,\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport * as React from 'react';\nimport { View as DefaultView } from 'react-native';\nimport { LineChart as DefaulLineChart } from 'react-native-chart-kit';\nimport { Surface as DefaultSurface, Text as DefaultText } from 'react-native-paper';\n\nimport Colors from 'constants/Colors';\nimport useColorScheme from 'hooks/useColorScheme';\nimport { hexToRgbA } from 'services/helpers-service';\nimport globalStyles from 'styles/globalStyles';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  }\n  return Colors[theme][colorName];\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & React.ComponentProps<typeof DefaultText>;\nexport type SurfaceProps = ThemeProps & React.ComponentProps<typeof DefaultSurface>;\nexport type ViewProps = ThemeProps & DefaultView['props'];\nexport type DefaulLineChartProps = ThemeProps &\n  Pick<DefaulLineChart['props'], Exclude<keyof DefaulLineChart['props'], 'data'>> & {\n    data: number[];\n  };\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n\nexport function Surface(props: SurfaceProps) {\n  const { style, ...otherProps } = props;\n  const themeStyle =\n    useColorScheme() === 'light' ? { shadowColor: '#6394c6' } : { shadowColor: '#000000' };\n\n  return <DefaultSurface style={[themeStyle, globalStyles.card, style]} {...otherProps} />;\n}\n\nexport function LineChart(props: DefaulLineChartProps) {\n  const { data } = props;\n\n  const color = useThemeColor({ light: Colors.light.text, dark: Colors.dark.text }, 'text');\n\n  const backgroundColor = useThemeColor(\n    { light: Colors.light.background, dark: Colors.dark.background },\n    'background'\n  );\n\n  return (\n    <DefaulLineChart\n      {...props}\n      data={{\n        labels: [],\n        datasets: [\n          {\n            data,\n            color: (opacity = 1) => hexToRgbA(color, opacity), // optional\n            strokeWidth: 2.2, // optional\n          },\n        ],\n      }}\n      withVerticalLabels={false}\n      withHorizontalLabels={false}\n      withDots={false}\n      chartConfig={{\n        color: (opacity) => hexToRgbA(backgroundColor, opacity),\n        backgroundGradientFrom: backgroundColor,\n        backgroundGradientTo: backgroundColor,\n        decimalPlaces: 2, // optional, defaults to 2dp\n      }}\n      bezier\n    />\n  );\n}\n","import * as React from 'react';\nimport { TextInput as DefaultTextInput } from 'react-native-paper';\n\nimport globalStyles from 'styles/globalStyles';\n\nimport { Text } from './Themed';\n\nexport default function TextInput(props: Props) {\n  const { label, error, ...otherProps } = props;\n\n  return (\n    <>\n      <Text>{label}</Text>\n      <DefaultTextInput\n        style={globalStyles.input}\n        {...otherProps}\n        theme={{ colors: { background: 'transparent' } }}\n        error={!!error}\n      />\n      <Text style={globalStyles.inputError}> {`${error || ''} `}</Text>\n    </>\n  );\n}\n\nexport type DefaultTextInputProps = React.ComponentProps<typeof DefaultTextInput>;\nexport type Props = Pick<\n  DefaultTextInputProps,\n  Exclude<keyof DefaultTextInputProps, 'error' | 'onSubmitEditing'>\n> & {\n  error?: string;\n  // eslint-disable-next-line no-unused-vars\n  onSubmitEditing?: (e?: React.FormEvent<HTMLFormElement>) => void;\n};\n","import { API_ENDPOINT, API_DEBUG_RESPONSE } from '@env';\nimport axios, { AxiosInstance, AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\n\nimport { jsonConsole } from './helpers-service';\n\nfunction serialize(obj: Record<string, string | number | boolean>): string {\n  if (!obj) return '';\n\n  const str: string[] = [];\n\n  Object.keys(obj).map((key) =>\n    str.push(`${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}`)\n  );\n\n  return str.join('&');\n}\n\nconst api = (token?: string): AxiosInstance => {\n  const apiLocal = axios.create({\n    baseURL: API_ENDPOINT,\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  apiLocal.interceptors.request.use(\n    (request: AxiosRequestConfig) => {\n      if (__DEV__)\n        jsonConsole(\n          `Sending ${request.method?.toUpperCase()} request to ${request.baseURL}${\n            request.url\n          }?${serialize(request.params)}`\n        );\n      return Promise.resolve(request);\n    },\n    (error) => Promise.reject(error)\n  );\n\n  apiLocal.interceptors.response.use(\n    (response: AxiosResponse) => {\n      if (__DEV__ && API_DEBUG_RESPONSE === 'true') jsonConsole('Response', response.data);\n\n      return Promise.resolve(response);\n    },\n    (error: AxiosError) => {\n      if (__DEV__ && API_DEBUG_RESPONSE === 'true')\n        jsonConsole('Error:', error.response?.status, error.response?.data);\n\n      return Promise.reject(error);\n    }\n  );\n\n  return apiLocal;\n};\n\nexport function getErrorMessage(error: AxiosError): string {\n  if (error.response?.data?.errors) {\n    const [fields]: Array<Array<string>> = Object.values(error.response.data.errors);\n    const [message] = fields;\n    if (message) return message;\n  }\n\n  if (error.response?.data.error) {\n    return error.response?.data.error;\n  }\n\n  return error.message;\n}\n\nexport default api;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { AxiosResponse } from 'axios';\nimport api, { getErrorMessage } from 'services/api-service';\n\nimport { StoreState, StoreDispatch } from '.';\n\nexport const authSlice = createSlice<AuthState, AuthReducers>({\n  name: 'auth',\n  initialState: {\n    user: {\n      id: 0,\n      name: '',\n      email: '',\n      api_token: '',\n    },\n    api_token: undefined,\n    loading: false,\n    success: false,\n    error: undefined,\n  },\n  reducers: {\n    login: (state) => {\n      state.loading = true;\n      state.success = false;\n      state.error = undefined;\n    },\n    login_success: (state, action) => {\n      state.loading = false;\n      state.success = true;\n      state.user = action.payload;\n      state.api_token = action.payload.api_token;\n    },\n    login_error: (state, action) => {\n      state.loading = false;\n      state.success = false;\n      state.error = action.payload;\n      state.api_token = undefined;\n    },\n    logout: (state) => {\n      state.api_token = undefined;\n    },\n  },\n});\n\nexport const { login, login_success, login_error, logout } = authSlice.actions;\n\nexport const loginAsync = (params: { email: string; password: string }) => (\n  dispatch: StoreDispatch\n) => {\n  dispatch(login());\n  api()\n    .post('login', params)\n    .then(({ data }: AxiosResponse<{ data: User }>) => {\n      dispatch(login_success(data.data));\n    })\n    .catch((error) => {\n      dispatch(login_error(getErrorMessage(error)));\n    });\n};\n\nexport const registerAsync = (params: {\n  email: string;\n  password: string;\n  password_confirmation: string;\n}) => (dispatch: StoreDispatch) => {\n  dispatch(login());\n  api()\n    .post('register', params)\n    .then(({ data }: AxiosResponse<{ data: User }>) => {\n      dispatch(login_success(data.data));\n    })\n    .catch((error) => {\n      dispatch(login_error(getErrorMessage(error)));\n    });\n};\n\nexport const selectAuth = (state: StoreState) => state.auth;\n\nexport const selecUser = (state: StoreState) => state.auth.user;\n\nexport const selectApiToken = (state: StoreState) => state.auth.api_token;\n\nexport default authSlice.reducer;\n\nexport type AuthState = {\n  user: User;\n  api_token: string;\n  loading: boolean;\n  success: boolean;\n  error?: string;\n};\n\nexport type AuthReducers = {\n  login: (state: AuthState) => void;\n  login_success: (state: AuthState, params: { payload: User }) => void;\n  login_error: (state: AuthState, params: { payload: string }) => void;\n  logout: (state: AuthState) => void;\n};\n\nexport type User = {\n  id: number;\n  name: string;\n  email: string;\n  api_token: string;\n};\n","import { AnyAction, createSlice, ThunkAction, ThunkDispatch } from '@reduxjs/toolkit';\nimport { AxiosResponse } from 'axios';\nimport api, { getErrorMessage } from 'services/api-service';\n\nimport { StoreState, StoreDispatch, AppThunk } from '.';\n\nexport const coinsSlice = createSlice<CoinsState, CoinsReducers>({\n  name: 'coins',\n  initialState: {\n    data: [],\n    loading: false,\n    success: false,\n    error: undefined,\n  },\n  reducers: {\n    list_coins: (state) => {\n      state.loading = true;\n      state.success = false;\n      state.error = undefined;\n    },\n    list_coins_success: (state, action) => {\n      state.loading = false;\n      state.success = true;\n      state.data = action.payload;\n    },\n    list_coins_error: (state, action) => {\n      state.loading = false;\n      state.success = false;\n      state.error = action.payload;\n    },\n    get_coin: (state) => {\n      state.loading = true;\n      state.success = false;\n      state.error = undefined;\n    },\n    get_coin_success: (state, action) => {\n      state.loading = false;\n      state.success = true;\n    },\n    get_coin_error: (state, action) => {\n      state.loading = false;\n      state.success = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const {\n  list_coins,\n  list_coins_success,\n  list_coins_error,\n  get_coin,\n  get_coin_success,\n  get_coin_error,\n} = coinsSlice.actions;\n\nexport const listCoinsAsync = (api_token: string) => (dispatch: StoreDispatch) => {\n  dispatch(list_coins());\n\n  return new Promise((resolve, reject) => {\n    api(api_token)\n      .get('coins')\n      .then(({ data }: AxiosResponse<{ data: Coin[] }>) => {\n        dispatch(list_coins_success(data.data));\n        resolve(data.data);\n      })\n      .catch((error) => {\n        dispatch(list_coins_error(getErrorMessage(error)));\n        reject(getErrorMessage(error));\n      });\n  });\n};\n\n// export type ThunkAction<\n//   R, // Return type of the thunk function\n//   S, // state type used by getState\n//   E, // any \"extra argument\" injected into the thunk\n//   A extends Action // known types of actions that can be dispatched\n// > = (dispatch: ThunkDispatch<S, E, A>, getState: () => S, extraArgument: E) => R;\n\nexport const getCoinAsync = (\n  api_token: string,\n  coin: Coin,\n  period: string\n): ThunkAction<Promise<Coin>, any, any, AnyAction> => (dispatch) => {\n  dispatch(get_coin());\n  return new Promise((resolve, reject) => {\n    api(api_token)\n      .get(`coins/${coin.id}`, { params: { period } })\n      .then(({ data }: AxiosResponse<{ data: Coin }>) => {\n        dispatch(get_coin_success(data.data));\n        resolve(data.data);\n      })\n      .catch((error) => {\n        dispatch(get_coin_error(getErrorMessage(error)));\n        reject(getErrorMessage(error));\n      });\n  });\n};\n\nexport const selectCoinState = (state: StoreState) => state.coins;\n\nexport default coinsSlice.reducer;\n\nexport type CoinsState = {\n  data: Coin[];\n  loading: boolean;\n  success: boolean;\n  error?: string;\n};\n\nexport type CoinsReducers = {\n  list_coins: (state: CoinsState) => void;\n  list_coins_success: (state: CoinsState, params: { payload: Coin[] }) => void;\n  list_coins_error: (state: CoinsState, params: { payload: string }) => void;\n  get_coin: (state: CoinsState) => void;\n  get_coin_success: (state: CoinsState, params: { payload: Coin }) => void;\n  get_coin_error: (state: CoinsState, params: { payload: string }) => void;\n};\n\nexport type CoinHistory = {\n  time: number;\n  high: number;\n  low: number;\n  open: number;\n  volumefrom: number;\n  volumeto: number;\n  close: number;\n  conversionType: string;\n  conversionSymbol: string;\n};\n\nexport type Coin = {\n  id: number;\n  name: string;\n  coinname: string;\n  fullname: string;\n  description: string;\n  symbol: string;\n  image: string;\n  image_url: string;\n  usd_price: number;\n  usd_change_pct_day: number;\n  usd_change_pct_24_hours: number;\n  usd_change_pct_hour: number;\n  historic: CoinHistory[];\n  created_at: string;\n  updated_at: string;\n  deleted_at?: string;\n};\n","import React from 'react';\n\nimport { AnyAction, applyMiddleware, combineReducers, createStore } from '@reduxjs/toolkit';\nimport * as storage from 'redux-storage';\nimport createEngine from 'redux-storage-engine-reactnativeasyncstorage';\nimport thunk, { ThunkAction } from 'redux-thunk';\n\nimport authReducer, { AuthState } from './authReducer';\nimport coinsReducer, { CoinsState } from './coinsReducer';\n\nconst reducer = storage.reducer(\n  combineReducers({\n    auth: authReducer,\n    coins: coinsReducer,\n  })\n);\n\nconst engine = createEngine('anchor-usd-app');\n\nconst middleware = storage.createMiddleware(engine);\n\nconst createStoreWithMiddleware = applyMiddleware(thunk, middleware)(createStore);\n\nconst store = createStoreWithMiddleware(reducer);\n\nconst load = storage.createLoader(engine);\n\nexport default function useStore() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      await load(store);\n\n      setLoadingComplete(true);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete ? store : false;\n}\n\nexport type StoreState = {\n  auth: AuthState;\n  coins: CoinsState;\n};\n\nexport type StoreDispatch = typeof store.dispatch;\n\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, StoreState, unknown, AnyAction>;\n\nexport * from './authReducer';\nexport * from './coinsReducer';\n","import * as React from 'react';\nimport { Keyboard, StyleSheet, View } from 'react-native';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { Button } from 'react-native-paper';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { CommonActions, useNavigation } from '@react-navigation/core';\nimport Logo from 'components/Logo';\nimport TextInput from 'components/TextInput';\nimport { Text } from 'components/Themed';\nimport Metrics from 'constants/Metrics';\nimport { Formik, FormikProps } from 'formik';\nimport { loginAsync, selectAuth } from 'store';\nimport globalStyles from 'styles/globalStyles';\nimport * as Yup from 'yup';\n\nexport default function LoginScreen() {\n  const dispatch = useDispatch();\n  const navigation = useNavigation();\n  const { loading, error } = useSelector(selectAuth);\n\n  function handleSubmitAsync(values: LoginFormValues) {\n    Keyboard.dismiss();\n\n    dispatch(loginAsync(values));\n  }\n\n  function renderLoginForm(props: FormikProps<LoginFormValues>) {\n    const { values, errors, setFieldValue, handleSubmit } = props;\n\n    return (\n      <>\n        <TextInput\n          keyboardType=\"email-address\"\n          textContentType=\"emailAddress\"\n          onChangeText={(value: string): void => setFieldValue('email', value)}\n          label=\"Email address\"\n          placeholder=\"enter email address\"\n          style={globalStyles.input}\n          onSubmitEditing={handleSubmit}\n          autoCapitalize=\"none\"\n          value={values.email}\n          error={errors.email}\n          autoCompleteType=\"email\"\n        />\n\n        <TextInput\n          textContentType=\"password\"\n          secureTextEntry\n          label=\"Password\"\n          onChangeText={(value: string): void => setFieldValue('password', value)}\n          placeholder=\"enter your password\"\n          style={globalStyles.input}\n          value={values.password}\n          error={errors.password}\n          autoCompleteType=\"password\"\n          autoCapitalize=\"none\"\n          onSubmitEditing={handleSubmit}\n          returnKeyType=\"send\"\n        />\n\n        <Button\n          mode=\"contained\"\n          disabled={loading}\n          style={globalStyles.button}\n          onPress={handleSubmit}\n        >\n          Log in\n        </Button>\n      </>\n    );\n  }\n\n  function navigateToRegister() {\n    navigation.dispatch(\n      CommonActions.reset({\n        index: 0,\n        routes: [{ name: 'Register' }],\n      })\n    );\n  }\n\n  return (\n    <KeyboardAwareScrollView\n      keyboardShouldPersistTaps=\"handled\"\n      centerContent\n      style={globalStyles.safeareaview}\n      contentContainerStyle={styles.scroll}\n    >\n      <SafeAreaView>\n        <View style={styles.logoContainer}>\n          <View style={styles.logo}>\n            <Logo width={120} height={120} />\n          </View>\n          <Text style={styles.h1}>Log in</Text>\n        </View>\n        <Text style={styles.error}>\n          {` `}\n          {error}\n        </Text>\n\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n          }}\n          validationSchema={validations}\n          validateOnChange={false}\n          onSubmit={handleSubmitAsync}\n        >\n          {renderLoginForm}\n        </Formik>\n\n        <Button onPress={navigateToRegister} style={styles.register} mode=\"text\" uppercase={false}>\n          <Text>\n            Already have an account? <Text style={globalStyles.tint}>Login</Text>\n          </Text>\n        </Button>\n      </SafeAreaView>\n    </KeyboardAwareScrollView>\n  );\n}\n\n/**\n * Validações do formulário\n */\nconst validations = Yup.object().shape({\n  email: Yup.string().email().required(),\n  password: Yup.string().required(),\n});\n\ntype LoginFormValues = {\n  email: string;\n  password: string;\n};\n\nconst styles = StyleSheet.create({\n  scroll: {\n    paddingHorizontal: Metrics.base,\n    justifyContent: 'center',\n    flex: 1,\n  },\n  logoContainer: {\n    marginTop: Metrics.base,\n    alignItems: 'center',\n  },\n  logo: {\n    width: 120,\n    height: 120,\n    borderRadius: 10,\n    overflow: 'hidden',\n    marginBottom: Metrics.base,\n  },\n  h1: {\n    fontWeight: '600',\n    textAlign: 'center',\n    fontSize: Metrics.h1,\n  },\n  error: {\n    textAlign: 'center',\n    color: '#AA0000',\n    fontSize: 16,\n    marginBottom: Metrics.base,\n  },\n  register: {\n    marginTop: Metrics.base,\n    marginBottom: Metrics.base,\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { StackScreenProps } from '@react-navigation/stack';\nimport { RootStackParamList } from 'types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import * as React from 'react';\nimport { Keyboard, StyleSheet, View } from 'react-native';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { Button } from 'react-native-paper';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { CommonActions, useNavigation } from '@react-navigation/core';\nimport Logo from 'components/Logo';\nimport TextInput from 'components/TextInput';\nimport { Text } from 'components/Themed';\nimport Metrics from 'constants/Metrics';\nimport { Formik, FormikProps } from 'formik';\nimport { registerAsync, selectAuth } from 'store';\nimport globalStyles from 'styles/globalStyles';\nimport * as Yup from 'yup';\n\nexport default function RegisterScreen() {\n  const dispatch = useDispatch();\n  const navigation = useNavigation();\n  const { loading, error } = useSelector(selectAuth);\n\n  function handleSubmitAsync(values: RegisterFormValues) {\n    Keyboard.dismiss();\n\n    dispatch(registerAsync(values));\n  }\n\n  function renderLoginForm(props: FormikProps<RegisterFormValues>) {\n    const { errors, setFieldValue, handleSubmit } = props;\n\n    return (\n      <>\n        <TextInput\n          keyboardType=\"email-address\"\n          textContentType=\"emailAddress\"\n          onChangeText={(value: string): void => setFieldValue('email', value)}\n          label=\"Email address\"\n          placeholder=\"enter email address\"\n          style={globalStyles.input}\n          onSubmitEditing={handleSubmit}\n          autoCapitalize=\"none\"\n          error={errors.email}\n          autoCompleteType=\"email\"\n        />\n\n        <TextInput\n          textContentType=\"password\"\n          secureTextEntry\n          label=\"Password\"\n          onChangeText={(value: string): void => setFieldValue('password', value)}\n          placeholder=\"enter your password\"\n          style={globalStyles.input}\n          error={errors.password}\n          autoCompleteType=\"password\"\n          autoCapitalize=\"none\"\n          onSubmitEditing={handleSubmit}\n        />\n\n        <TextInput\n          textContentType=\"password\"\n          secureTextEntry\n          label=\"Confirm Password\"\n          onChangeText={(value: string): void => setFieldValue('password_confirmation', value)}\n          placeholder=\"confirm your password\"\n          style={globalStyles.input}\n          error={errors.password_confirmation}\n          autoCompleteType=\"password\"\n          autoCapitalize=\"none\"\n          onSubmitEditing={handleSubmit}\n          returnKeyType=\"send\"\n        />\n\n        <Button\n          mode=\"contained\"\n          disabled={loading}\n          style={globalStyles.button}\n          onPress={handleSubmit}\n        >\n          Sign up\n        </Button>\n      </>\n    );\n  }\n\n  function navigateToLogin() {\n    navigation.dispatch(\n      CommonActions.reset({\n        index: 0,\n        routes: [{ name: 'Login' }],\n      })\n    );\n  }\n\n  return (\n    <KeyboardAwareScrollView\n      keyboardShouldPersistTaps=\"handled\"\n      centerContent\n      style={globalStyles.safeareaview}\n      contentContainerStyle={styles.scroll}\n    >\n      <SafeAreaView>\n        <View style={styles.logoContainer}>\n          <View style={styles.logo}>\n            <Logo width={120} height={120} />\n          </View>\n          <Text style={styles.h1}>Create account</Text>\n        </View>\n        <Text style={styles.error}>\n          {` `}\n          {error}\n        </Text>\n\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n            password_confirmation: '',\n          }}\n          validationSchema={validations}\n          validateOnChange={false}\n          onSubmit={handleSubmitAsync}\n        >\n          {renderLoginForm}\n        </Formik>\n\n        <Button onPress={navigateToLogin} style={styles.login} mode=\"text\" uppercase={false}>\n          <Text>\n            Already have an account? <Text style={globalStyles.tint}>Login</Text>\n          </Text>\n        </Button>\n      </SafeAreaView>\n    </KeyboardAwareScrollView>\n  );\n}\n\n/**\n * Validações do formulário\n */\nconst validations = Yup.object().shape({\n  email: Yup.string().email().required('Required'),\n  password: Yup.string().required('Required'),\n  password_confirmation: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Password must match')\n    .required('Required'),\n});\n\ntype RegisterFormValues = {\n  email: string;\n  password: string;\n  password_confirmation: string;\n};\n\nconst styles = StyleSheet.create({\n  scroll: {\n    paddingHorizontal: Metrics.base,\n  },\n  logoContainer: {\n    marginTop: Metrics.base,\n    alignItems: 'center',\n  },\n  logo: {\n    width: 120,\n    height: 120,\n    borderRadius: 10,\n    overflow: 'hidden',\n    marginBottom: Metrics.base,\n  },\n  h1: {\n    fontWeight: '600',\n    textAlign: 'center',\n    fontSize: Metrics.h1,\n  },\n  error: {\n    textAlign: 'center',\n    color: '#AA0000',\n    fontSize: 16,\n    marginBottom: Metrics.base,\n  },\n  login: {\n    marginTop: Metrics.base,\n    marginBottom: Metrics.base,\n  },\n});\n","import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { ActivityIndicator } from 'react-native-paper';\n\nimport Layout from 'constants/Layout';\nimport Metrics from 'constants/Metrics';\n\nimport { LineChart } from './Themed';\n\nfunction CoinGraph({ data, loading }: { data: number[]; loading: boolean }) {\n  return (\n    <View style={styles.overflow}>\n      <View style={styles.container}>\n        <LineChart data={data} width={58 + Layout.window.width - Metrics.base * 2} height={220} />\n\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size={40} animating={loading} />\n        </View>\n      </View>\n    </View>\n  );\n}\n\nexport default CoinGraph;\n\nconst styles = StyleSheet.create({\n  overflow: { overflow: 'hidden' },\n  container: { marginLeft: -60, position: 'relative' },\n  loadingContainer: {\n    ...StyleSheet.absoluteFillObject,\n    left: 60,\n    justifyContent: 'center',\n  },\n});\n","import * as React from 'react';\nimport { Image, StyleSheet, View } from 'react-native';\nimport { Avatar, List } from 'react-native-paper';\n\nimport Colors from 'constants/Colors';\nimport Metrics from 'constants/Metrics';\nimport { formatMoney, formatPercentage } from 'services/helpers-service';\nimport { Coin } from 'store';\nimport globalStyles from 'styles/globalStyles';\n\nimport { Surface, Text } from './Themed';\n\nfunction CoinItem({\n  item,\n  content,\n  showGraphImage,\n}: {\n  item: Coin;\n  content?: React.ReactElement;\n  showGraphImage?: boolean;\n}) {\n  function leftComponent() {\n    return <Avatar.Image style={globalStyles.avatar} size={40} source={{ uri: item.image_url }} />;\n  }\n\n  function rightComponent() {\n    return (\n      <View style={styles.righComponent}>\n        {showGraphImage && (\n          <Image\n            style={styles.chartImage}\n            source={{\n              uri: `https://images.cryptocompare.com/sparkchart/${item.symbol}/USD/latest.png`,\n            }}\n          />\n        )}\n\n        <View>\n          <Text style={styles.price}>{formatMoney(item.usd_price)}</Text>\n          <Text\n            style={[\n              styles.percentage,\n              { color: item.usd_change_pct_24_hours > 0 ? Colors.success : Colors.danger },\n            ]}\n          >\n            {item.usd_change_pct_24_hours > 0 ? '▴' : '▾'}\n            {formatPercentage(item.usd_change_pct_24_hours)}\n          </Text>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <Surface style={styles.card}>\n      <List.Item\n        title={item.coinname}\n        titleStyle={styles.title}\n        description={item.name}\n        descriptionStyle={styles.description}\n        left={leftComponent}\n        descriptionNumberOfLines={1}\n        right={rightComponent}\n      />\n\n      {content}\n    </Surface>\n  );\n}\n\nCoinItem.defaultProps = {\n  showGraphImage: true,\n  content: undefined,\n};\n\nexport default CoinItem;\n\nconst styles = StyleSheet.create({\n  card: {\n    marginBottom: Metrics.base,\n    marginHorizontal: Metrics.base,\n  },\n  title: {\n    marginBottom: Metrics.base / 4,\n    fontWeight: '600',\n    fontSize: Metrics.label,\n  },\n  description: {\n    opacity: 0.8,\n    fontSize: Metrics.small,\n  },\n  righComponent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    width: 180,\n  },\n  chartImage: {\n    flex: 1,\n    height: '100%',\n    maxWidth: 150 * 0.8,\n    maxHeight: 35 * 0.8,\n    resizeMode: 'contain',\n  },\n  price: {\n    fontWeight: '700',\n    fontSize: Metrics.label - 2,\n    minWidth: 90,\n    textAlign: 'right',\n    marginBottom: 2,\n  },\n  percentage: {\n    fontSize: Metrics.label - 3,\n    textAlign: 'right',\n    fontWeight: '500',\n  },\n});\n","import { useDispatch } from 'react-redux';\n\nimport { AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { StoreState } from 'store';\n\nexport type ReduxDispatch = ThunkDispatch<StoreState, any, AnyAction>;\n\nexport default function useReduxDispatch(): ReduxDispatch {\n  return useDispatch<ReduxDispatch>();\n}\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { Button, Divider, List, Surface, Title } from 'react-native-paper';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useSelector } from 'react-redux';\n\nimport { RouteProp, useRoute } from '@react-navigation/core';\nimport CoinGraph from 'components/CoinGraph';\nimport CoinItem from 'components/CoinItem';\nimport { Text, View as ViewThemed } from 'components/Themed';\nimport Colors, { tintColorLight } from 'constants/Colors';\nimport Metrics from 'constants/Metrics';\nimport useReduxDispatch from 'hooks/useReduxDispatch';\nimport { formatMoney, formatPercentage, hapticsLight, jsonConsole } from 'services/helpers-service';\nimport { getCoinAsync, selectApiToken, selectCoinState } from 'store';\nimport globalStyles from 'styles/globalStyles';\nimport { RootStackParamList } from 'types';\n\nexport default function ViewCoinScreen() {\n  const route: RouteProp<RootStackParamList, 'ViewCoin'> = useRoute();\n  const [coin, setCoin] = useState(route.params.coin);\n\n  const dispatch = useReduxDispatch();\n  const api_token = useSelector(selectApiToken);\n  const { loading } = useSelector(selectCoinState);\n  const [data, setData] = useState([0]);\n  const [period, setPeriod] = useState('day');\n\n  React.useEffect(() => {\n    refresh();\n  }, []);\n\n  function refresh(_period = 'day') {\n    dispatch(getCoinAsync(api_token, coin, _period))\n      .then((c) => {\n        setCoin(c);\n        setData(c.historic.map((h) => h.close));\n      })\n      .catch((error) => jsonConsole(error));\n  }\n\n  function renderActions() {\n    const actions: Record<string, string> = {\n      '1H': 'hour',\n      '1D': 'day',\n      '1W': 'week',\n      '1M': 'month',\n    };\n\n    return (\n      <View style={[globalStyles.row, styles.actions]}>\n        {Object.keys(actions).map((action) => (\n          <View key={action} style={globalStyles.col}>\n            <Button\n              mode={period === actions[action] ? 'contained' : 'text'}\n              onPress={\n                period !== actions[action]\n                  ? () => {\n                      setPeriod(actions[action]);\n                      refresh(actions[action]);\n                      hapticsLight();\n                    }\n                  : undefined\n              }\n            >\n              {action}\n            </Button>\n          </View>\n        ))}\n      </View>\n    );\n  }\n\n  return (\n    <>\n      <View style={styles.topBackground} />\n      <ScrollView contentContainerStyle={styles.scroll}>\n        <CoinItem\n          item={coin}\n          showGraphImage={false}\n          content={\n            <>\n              <CoinGraph data={data} loading={loading} />\n              {renderActions()}\n            </>\n          }\n        />\n\n        <ViewThemed style={styles.container}>\n          <View style={globalStyles.content}>\n            <Title>{`What is ${coin.coinname}?`}</Title>\n            <Text\n              style={[globalStyles.contentDescription, styles.description]}\n            >{`${coin.description}`}</Text>\n\n            <Title>{`${coin.coinname} Statistics`}</Title>\n          </View>\n\n          <List.Item\n            title={`${coin.coinname} Price`}\n            right={() => <Text style={styles.value}>{formatMoney(coin.usd_price)}</Text>}\n          />\n          <Divider />\n          <List.Item\n            title=\"Price Change Last Hour\"\n            right={() => (\n              <Text style={styles.value}>{formatPercentage(coin.usd_change_pct_hour ?? 0)}</Text>\n            )}\n          />\n          <Divider />\n          <List.Item\n            title=\"Price Change Last 24 hours\"\n            right={() => (\n              <Text style={styles.value}>\n                {formatPercentage(coin.usd_change_pct_24_hours ?? 0)}\n              </Text>\n            )}\n          />\n        </ViewThemed>\n      </ScrollView>\n\n      <Surface style={styles.surface}>\n        <SafeAreaView edges={['bottom']}>\n          <View style={globalStyles.row}>\n            <View style={globalStyles.col}>\n              <Button style={globalStyles.button} mode=\"contained\" color={tintColorLight}>\n                Buy\n              </Button>\n            </View>\n            <View style={globalStyles.col}>\n              <Button style={globalStyles.button} color={Colors.dark.background} mode=\"contained\">\n                Sell\n              </Button>\n            </View>\n          </View>\n        </SafeAreaView>\n      </Surface>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  topBackground: {\n    height: 56,\n    backgroundColor: tintColorLight,\n    marginBottom: -56,\n  },\n  scroll: { paddingTop: Metrics.base },\n  container: { paddingBottom: Metrics.base * 2 },\n  description: {\n    marginBottom: Metrics.base,\n  },\n  value: {\n    alignSelf: 'center',\n  },\n  surface: {\n    paddingHorizontal: Metrics.base,\n    paddingTop: Metrics.base,\n  },\n  actions: {\n    paddingHorizontal: Metrics.base / 4,\n    paddingBottom: Metrics.base / 4,\n  },\n});\n","import * as React from 'react';\nimport {\n  FlatList,\n  StyleSheet,\n  ListRenderItemInfo,\n  Pressable,\n  View,\n  RefreshControl,\n} from 'react-native';\nimport { ActivityIndicator } from 'react-native-paper';\nimport { useSelector } from 'react-redux';\n\nimport { useNavigation } from '@react-navigation/core';\nimport { Link } from '@react-navigation/native';\nimport CoinItem from 'components/CoinItem';\nimport Metrics from 'constants/Metrics';\nimport useReduxDispatch from 'hooks/useReduxDispatch';\nimport { hapticsLight, isWeb } from 'services/helpers-service';\nimport { Coin, listCoinsAsync, selectApiToken, selectCoinState } from 'store';\nimport globalStyles from 'styles/globalStyles';\n\nexport default function SettingsScreen() {\n  const dispatch = useReduxDispatch();\n  const navigation = useNavigation();\n\n  const { data, success } = useSelector(selectCoinState);\n  const api_token = useSelector(selectApiToken);\n  const [refreshing, setRefreshing] = React.useState(false);\n\n  React.useEffect(() => {\n    if (data.length) {\n      onRefresh();\n    } else {\n      dispatch(listCoinsAsync(api_token));\n    }\n  }, []);\n\n  function onRefresh() {\n    setRefreshing(true);\n    dispatch(listCoinsAsync(api_token)).finally(() => setRefreshing(false));\n  }\n\n  function renderCoinItem({ item }: ListRenderItemInfo<Coin>) {\n    function navigateToViewCoinScreen() {\n      navigation.navigate('ViewCoin', { coin: item });\n      hapticsLight();\n    }\n\n    if (isWeb()) {\n      return (\n        <Link to={`/coins/${item.id}`}>\n          <View style={globalStyles.link}>\n            <CoinItem item={item} />\n          </View>\n        </Link>\n      );\n    }\n\n    return (\n      <Pressable onPress={navigateToViewCoinScreen}>\n        <CoinItem item={item} />\n      </Pressable>\n    );\n  }\n\n  function keyExtractor(item: Coin) {\n    return item.id.toString();\n  }\n\n  return (\n    <FlatList\n      refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n      contentContainerStyle={styles.list}\n      data={data}\n      renderItem={renderCoinItem}\n      keyExtractor={keyExtractor}\n      ListEmptyComponent={\n        <View style={globalStyles.loadingContainer}>\n          <ActivityIndicator size={42} hidesWhenStopped animating={!success} />\n        </View>\n      }\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  list: {\n    paddingVertical: Metrics.base,\n  },\n});\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { ListRenderItemInfo, Pressable, StyleSheet, View as ViewBase } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { Button, IconButton } from 'react-native-paper';\n\nimport { Ionicons } from '@expo/vector-icons';\nimport { useNavigation } from '@react-navigation/core';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { Surface, Text } from 'components/Themed';\nimport Colors, { tintColorLight } from 'constants/Colors';\nimport Layout from 'constants/Layout';\nimport Metrics from 'constants/Metrics';\nimport useColorScheme from 'hooks/useColorScheme';\nimport { formatMoney, hapticsLight } from 'services/helpers-service';\nimport globalStyles from 'styles/globalStyles';\nimport { RootStackParamList } from 'types';\n\nexport default function PortifolioScreen() {\n  const navigation = useNavigation<StackNavigationProp<RootStackParamList>>();\n  const [amount, setAmount] = useState(0);\n  const colorScheme = useColorScheme();\n  const buttons: Array<CalculatorButton> = [1, 2, 3, 4, 5, 6, 7, 8, 9, '.', 0, 'BACKSPACE'];\n\n  React.useEffect(() => {\n    navigation.setOptions({\n      headerLeft: () => (\n        <Ionicons\n          size={20}\n          color={Colors[colorScheme].text}\n          style={styles.headerIcon}\n          name=\"qr-code-outline\"\n        />\n      ),\n      headerRight: () => (\n        <Ionicons\n          size={20}\n          color={Colors[colorScheme].text}\n          style={styles.headerIcon}\n          name=\"document-outline\"\n        />\n      ),\n    });\n  }, [colorScheme]);\n\n  function renderHeader() {\n    return <Text style={styles.amount}>{formatMoney(amount)}</Text>;\n  }\n\n  function renderButton({ item: button }: ListRenderItemInfo<CalculatorButton>) {\n    function pressButton() {\n      hapticsLight();\n\n      const localAmount = Number((amount * 100).toFixed(0));\n\n      if (typeof button === 'number') {\n        return setAmount(Number(`${localAmount}${button}`) / 100);\n      }\n\n      return setAmount(Number(localAmount.toString().slice(0, -1)) / 100);\n    }\n\n    return (\n      <ViewBase style={styles.button}>\n        {button !== '.' ? (\n          <Pressable onPress={pressButton}>\n            <Surface style={styles.buttonRound}>\n              {typeof button === 'number' ? (\n                <Text style={styles.buttonText}>{button}</Text>\n              ) : (\n                <Ionicons\n                  style={styles.buttonText}\n                  name=\"backspace-outline\"\n                  color={Colors[colorScheme].text}\n                />\n              )}\n            </Surface>\n          </Pressable>\n        ) : null}\n      </ViewBase>\n    );\n  }\n\n  function keyExtractor(item: CalculatorButton) {\n    return item.toString();\n  }\n\n  return (\n    <>\n      <ViewBase style={styles.container}>\n        <FlatList\n          contentContainerStyle={styles.listContent}\n          data={buttons}\n          ListHeaderComponent={renderHeader}\n          renderItem={renderButton}\n          keyExtractor={keyExtractor}\n          numColumns={3}\n        />\n      </ViewBase>\n\n      <ViewBase style={[globalStyles.row, styles.actions]}>\n        <ViewBase style={globalStyles.col}>\n          <Button\n            disabled={amount === 0}\n            style={globalStyles.button}\n            mode=\"contained\"\n            color={tintColorLight}\n          >\n            Request\n          </Button>\n        </ViewBase>\n        <ViewBase style={globalStyles.col}>\n          <Button\n            disabled={amount === 0}\n            style={globalStyles.button}\n            color={Colors.dark.background}\n            mode=\"contained\"\n          >\n            Pay\n          </Button>\n        </ViewBase>\n      </ViewBase>\n    </>\n  );\n}\n\ntype CalculatorButton = number | '.' | 'BACKSPACE';\n\nconst BUTTON_SIZE = (Layout.window.width * 0.8) / 3 - Metrics.base * 1.5;\n\nconst styles = StyleSheet.create({\n  headerIcon: {\n    marginHorizontal: Metrics.base,\n  },\n  container: {\n    flex: 1,\n    width: Layout.window.width * 0.8,\n    alignSelf: 'center',\n  },\n  listContent: {\n    maxWidth: Layout.window.width * 0.8,\n    justifyContent: 'center',\n  },\n  amount: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    paddingVertical: Metrics.base * 1.5,\n  },\n  button: {\n    flex: 1,\n    marginHorizontal: 1,\n  },\n  buttonRound: {\n    borderRadius: BUTTON_SIZE / 2,\n    width: BUTTON_SIZE,\n    height: BUTTON_SIZE,\n    marginBottom: Metrics.base,\n    alignSelf: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    shadowOpacity: 0.05,\n  },\n  buttonText: {\n    fontSize: Metrics.h1,\n    opacity: 0.6,\n  },\n  actions: {\n    paddingHorizontal: Metrics.base,\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Divider, List } from 'react-native-paper';\n\nimport Metrics from 'constants/Metrics';\nimport globalStyles from 'styles/globalStyles';\n\nimport { Surface } from './Themed';\n\nfunction ListItem(props: Props) {\n  const { size, destructive, cardDisabled, showDividers, icon, onPress } = props;\n\n  return (\n    <Surface style={[cardDisabled ? globalStyles.cardDisabled : globalStyles.card]}>\n      {showDividers && <Divider />}\n      <List.Item\n        style={[styles.item, destructive && styles.itemDestructive]}\n        titleStyle={[\n          styles.title,\n          size === 'large' && styles.titleLarge,\n          destructive && styles.titleDestructive,\n        ]}\n        left={\n          icon\n            ? (iconProps) => <List.Icon {...iconProps} icon={icon} style={styles.icon} />\n            : undefined\n        }\n        right={\n          onPress\n            ? (iconProps) => (\n                <List.Icon {...iconProps} icon=\"chevron-right\" style={styles.icon} color=\"red\" />\n              )\n            : undefined\n        }\n        {...props}\n      />\n      {showDividers && <Divider />}\n    </Surface>\n  );\n}\n\nListItem.defaultProps = {\n  size: 'default',\n  destructive: false,\n  onPress: null,\n  icon: undefined,\n  cardDisabled: false,\n  showDividers: false,\n};\n\nexport default ListItem;\n\ntype Props = React.ComponentProps<typeof List.Item> & {\n  size?: 'small' | 'default' | 'large';\n  icon?: string;\n  destructive?: boolean;\n  cardDisabled?: boolean;\n  showDividers?: boolean;\n  onPress?: () => any;\n};\n\nconst styles = StyleSheet.create({\n  surface: {\n    elevation: 0,\n  },\n  title: {\n    marginBottom: Metrics.base / 4,\n    fontWeight: '500',\n  },\n  titleLarge: {\n    fontSize: Metrics.base * 1.2,\n    fontWeight: '600',\n  },\n  titleDestructive: {\n    color: '#ff0000',\n  },\n  item: {\n    paddingHorizontal: Metrics.base,\n    elevation: 0,\n  },\n  itemDestructive: {\n    backgroundColor: '#ff000011',\n  },\n  icon: {\n    margin: 0,\n    alignSelf: 'center',\n  },\n});\n","import * as React from 'react';\nimport Svg, { G, Path, Circle } from 'react-native-svg';\n\nfunction UsdIcon(props: { width?: number; height?: number }) {\n  return (\n    <Svg {...props} viewBox=\"0 0 512 512\">\n      <Circle fill=\"#F0F0F0\" cx=\"256\" cy=\"256\" r=\"256\" />\n      <G>\n        <Path fill=\"#D80027\" d=\"M244.87,256H512c0-23.106-3.08-45.49-8.819-66.783H244.87V256z\" />\n        <Path\n          fill=\"#D80027\"\n          d=\"M244.87,122.435h229.556c-15.671-25.572-35.708-48.175-59.07-66.783H244.87V122.435z\"\n        />\n        <Path\n          fill=\"#D80027\"\n          d=\"M256,512c60.249,0,115.626-20.824,159.356-55.652H96.644C140.374,491.176,195.751,512,256,512z\"\n        />\n        <Path\n          fill=\"#D80027\"\n          d=\"M37.574,389.565h436.852c12.581-20.529,22.338-42.969,28.755-66.783H8.819   C15.236,346.596,24.993,369.036,37.574,389.565z\"\n        />\n      </G>\n      <Path\n        fill=\"#0052B4\"\n        d=\"M118.584,39.978h23.329l-21.7,15.765l8.289,25.509l-21.699-15.765L85.104,81.252l7.16-22.037  C73.158,75.13,56.412,93.776,42.612,114.552h7.475l-13.813,10.035c-2.152,3.59-4.216,7.237-6.194,10.938l6.596,20.301l-12.306-8.941  c-3.059,6.481-5.857,13.108-8.372,19.873l7.267,22.368h26.822l-21.7,15.765l8.289,25.509l-21.699-15.765l-12.998,9.444  C0.678,234.537,0,245.189,0,256h256c0-141.384,0-158.052,0-256C205.428,0,158.285,14.67,118.584,39.978z M128.502,230.4  l-21.699-15.765L85.104,230.4l8.289-25.509l-21.7-15.765h26.822l8.288-25.509l8.288,25.509h26.822l-21.7,15.765L128.502,230.4z   M120.213,130.317l8.289,25.509l-21.699-15.765l-21.699,15.765l8.289-25.509l-21.7-15.765h26.822l8.288-25.509l8.288,25.509h26.822  L120.213,130.317z M220.328,230.4l-21.699-15.765L176.93,230.4l8.289-25.509l-21.7-15.765h26.822l8.288-25.509l8.288,25.509h26.822  l-21.7,15.765L220.328,230.4z M212.039,130.317l8.289,25.509l-21.699-15.765l-21.699,15.765l8.289-25.509l-21.7-15.765h26.822  l8.288-25.509l8.288,25.509h26.822L212.039,130.317z M212.039,55.743l8.289,25.509l-21.699-15.765L176.93,81.252l8.289-25.509  l-21.7-15.765h26.822l8.288-25.509l8.288,25.509h26.822L212.039,55.743z\"\n      />\n    </Svg>\n  );\n}\n\nUsdIcon.defaultProps = { width: 36, height: 36 };\n\nexport default UsdIcon;\n","import * as React from 'react';\nimport { StyleSheet, View, RefreshControl, ScrollView } from 'react-native';\nimport { IconButton } from 'react-native-paper';\n\nimport { useNavigation } from '@react-navigation/core';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport ListItem from 'components/ListItem';\nimport { Text } from 'components/Themed';\nimport UsdIcon from 'components/UsdIcon';\nimport Colors, { tintColorLight } from 'constants/Colors';\nimport Metrics from 'constants/Metrics';\nimport { formatMoney, formatPercentage } from 'services/helpers-service';\nimport { RootStackParamList } from 'types';\n\nexport default function PortifolioScreen() {\n  const navigation = useNavigation<StackNavigationProp<RootStackParamList>>();\n  const [refreshing, setRefreshing] = React.useState(false);\n\n  React.useEffect(() => {\n    onRefresh();\n\n    navigation.setOptions({\n      headerRight: () => (\n        <IconButton size={16} color={Colors.white} style={styles.headerIcon} icon=\"plus\" />\n      ),\n    });\n  }, []);\n\n  function onRefresh() {\n    setRefreshing(true);\n    setTimeout(() => setRefreshing(false), 700);\n  }\n\n  function rightComponent() {\n    return (\n      <View style={styles.righComponent}>\n        <View>\n          <Text style={styles.price}>{formatMoney(0)} USD</Text>\n          <Text style={[styles.percentage]}>{formatPercentage(0)} USD</Text>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}>\n      <View style={styles.topBackground}>\n        <Text lightColor={Colors.dark.text} darkColor={Colors.dark.text} style={styles.label}>\n          Total balance\n        </Text>\n        <Text lightColor={Colors.dark.text} darkColor={Colors.dark.text} style={styles.amount}>\n          {formatMoney(0)}\n        </Text>\n      </View>\n\n      <View style={[styles.card]}>\n        <ListItem\n          title=\"Margin Account\"\n          description=\"Available buying power\"\n          left={() => <IconButton color={Colors.white} icon=\"speedometer\" style={styles.icon} />}\n          right={rightComponent}\n          descriptionNumberOfLines={1}\n        />\n      </View>\n\n      <View style={[styles.card]}>\n        <ListItem\n          title=\"High Yield Interest Account\"\n          description=\"Interest Rate: 7.83% APR\"\n          left={() => <UsdIcon style={[styles.icon, styles.iconUsd]} />}\n          right={rightComponent}\n          descriptionNumberOfLines={1}\n        />\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  topBackground: {\n    backgroundColor: tintColorLight,\n    marginBottom: -Metrics.base - 1,\n    borderBottomLeftRadius: Metrics.base,\n    borderBottomRightRadius: Metrics.base,\n    padding: Metrics.base,\n    paddingBottom: Metrics.base * 2,\n  },\n  label: {\n    fontSize: Metrics.small,\n  },\n  amount: {\n    fontWeight: 'bold',\n    fontSize: Metrics.h1,\n  },\n  card: {\n    marginBottom: Metrics.base,\n    marginHorizontal: Metrics.base + 2,\n  },\n  icon: {\n    marginLeft: 0,\n    marginHorizontal: Metrics.small / 2,\n    alignSelf: 'center',\n    backgroundColor: Colors.purple,\n    width: 36,\n    height: 36,\n  },\n  iconUsd: {\n    backgroundColor: Colors.transparent,\n  },\n  headerIcon: {\n    backgroundColor: tintColorLight,\n    marginRight: Metrics.base,\n  },\n  righComponent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n  },\n  price: {\n    fontWeight: '700',\n    fontSize: Metrics.label - 2,\n    minWidth: 90,\n    textAlign: 'right',\n    marginBottom: 2,\n  },\n  percentage: {\n    fontSize: Metrics.label - 3,\n    textAlign: 'right',\n    fontWeight: '500',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List } from 'react-native-paper';\n\nimport Metrics from 'constants/Metrics';\n\nimport { Text } from './Themed';\n\nfunction ListSubheader(props: React.ComponentProps<List.Subheader>) {\n  return (\n    <List.Subheader style={styles.item} {...props}>\n      <Text>{props.children}</Text>\n    </List.Subheader>\n  );\n}\n\nListSubheader.defaultProps = {};\n\nexport default ListSubheader;\n\nconst styles = StyleSheet.create({\n  item: {\n    marginTop: Metrics.base,\n    paddingHorizontal: Metrics.base,\n    elevation: 0,\n    fontWeight: 'bold',\n    fontSize: Metrics.label,\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, ListRenderItemInfo, SectionList, SectionListData, View } from 'react-native';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ListItem from 'components/ListItem';\nimport ListSubheader from 'components/ListSubheader';\nimport Metrics from 'constants/Metrics';\nimport { openUrl } from 'services/helpers-service';\nimport { logout, selecUser } from 'store';\nimport { SettingsSectionData, SettingsItem, SettingsSection } from 'types';\n\nexport default function ExploreScreen() {\n  const dispatch = useDispatch();\n  const user = useSelector(selecUser);\n\n  const DATA: SettingsSectionData = [\n    {\n      title: 'Friends',\n      data: [\n        {\n          title: 'Invite Friends',\n          description: 'Share via email, text, or social media',\n          icon: 'account-plus',\n        },\n        {\n          title: 'Move',\n          description: 'Let friends find you by phone or email',\n          icon: 'account-multiple',\n        },\n      ],\n    },\n    {\n      title: 'Earn',\n      data: [\n        {\n          title: 'Interest',\n          description: 'Earn interest on USD and crypto',\n          icon: 'chart-donut',\n        },\n        {\n          title: 'Auto invest',\n          description: 'Schedule automatic purchases or deposits',\n          icon: 'update',\n        },\n      ],\n    },\n    {\n      title: 'Verification',\n      data: [\n        {\n          title: 'Verification Levels',\n          description: 'Get verified for deposits and withdrawals',\n          icon: 'checkbox-marked-outline',\n        },\n      ],\n    },\n    {\n      title: 'Security and Alerts',\n      data: [\n        {\n          title: 'Two Factor Authentication',\n          description: 'Scan the following QR Code',\n          icon: 'fullscreen',\n        },\n        {\n          title: 'Security Lock',\n          description: 'Require PIN or Face ID for Transactions',\n          icon: 'lock-outline',\n        },\n        {\n          title: 'Notifications',\n          description: 'Configure notifications and alerts',\n          icon: 'bell',\n        },\n      ],\n    },\n    {\n      title: 'Payment Methods',\n      data: [\n        {\n          title: 'Linked Bank Accounts',\n          description: 'For deposits and withdrawals',\n          icon: 'bank-outline',\n        },\n        {\n          title: 'Credit / Debit Cards',\n          description: 'Best for small purchases',\n          icon: 'credit-card-outline',\n        },\n        {\n          title: 'Notifications',\n          description: 'Configure notifications and alerts',\n          icon: 'bell',\n        },\n      ],\n    },\n    {\n      title: 'Support',\n      data: [\n        {\n          title: 'Contact Support',\n          description: 'Get help, or share feedback',\n          icon: 'message-outline',\n          onPress: () =>\n            openUrl(\n              `https://dashboard.anchorusd.com/support/contact?email=${user.email}&name=Anchor User`\n            ),\n        },\n      ],\n    },\n  ];\n\n  function renderItem({ item }: ListRenderItemInfo<SettingsItem>) {\n    return (\n      <View style={[!item.onPress && styles.disabled]}>\n        <ListItem {...item} cardDisabled showDividers />\n      </View>\n    );\n  }\n\n  function renderListHeaderComponent() {\n    return (\n      <ListItem size=\"large\" title={user.email} description=\"Verification Level 1\" cardDisabled />\n    );\n  }\n\n  function renderSectionHeader(data: { section: SectionListData<SettingsItem, SettingsSection> }) {\n    return <ListSubheader>{data.section.title}</ListSubheader>;\n  }\n\n  function renderListFooterComponent() {\n    return (\n      <View style={styles.logout}>\n        <ListItem destructive title=\"Log out\" onPress={() => dispatch(logout())} cardDisabled />\n      </View>\n    );\n  }\n\n  function keyExtractor(_: SettingsItem, index: number) {\n    return index.toString();\n  }\n\n  return (\n    <SectionList\n      contentContainerStyle={styles.list}\n      sections={DATA}\n      keyExtractor={keyExtractor}\n      renderItem={renderItem}\n      ListHeaderComponent={renderListHeaderComponent}\n      ListFooterComponent={renderListFooterComponent}\n      renderSectionHeader={renderSectionHeader}\n      stickySectionHeadersEnabled={false}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  list: {\n    paddingVertical: Metrics.base * 2,\n  },\n  logout: {\n    marginTop: Metrics.base * 2,\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n});\n","/* eslint-disable react/prop-types */\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { EdgeInsets, SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nimport { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Colors from 'constants/Colors';\nimport useColorScheme from 'hooks/useColorScheme';\nimport ExploreScreen from 'screens/ExploreScreen';\nimport MoveScreen from 'screens/MoveScreen';\nimport PortifolioScreen from 'screens/PortifolioScreen';\nimport SettingsScreen from 'screens/SettingsScreen';\nimport { headerStyle, tabOptions } from 'styles/globalStyles';\nimport {\n  BottomTabParamList,\n  ExploreTabParamList,\n  MoveTabParamList,\n  PortifolioTabParamList,\n  SettingsTabParamList,\n} from 'types';\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  function renderTabs(insets: EdgeInsets | null) {\n    return (\n      <>\n        <BottomTab.Navigator\n          initialRouteName=\"ExploreTab\"\n          tabBarOptions={{ ...tabOptions, activeTintColor: Colors[colorScheme].tint }}\n        >\n          <BottomTab.Screen\n            name=\"ExploreTab\"\n            component={ExploreTab}\n            options={{\n              tabBarIcon: (props) => <TabBarIcon {...props} name=\"compass-sharp\" />,\n            }}\n          />\n          <BottomTab.Screen\n            name=\"PortifolioTab\"\n            component={PortifolioTab}\n            options={{\n              tabBarIcon: (props) => <TabBarIcon {...props} name=\"wallet-sharp\" />,\n            }}\n          />\n          <BottomTab.Screen\n            name=\"MoveTab\"\n            component={MoveTab}\n            options={{\n              tabBarIcon: (props) => <TabBarIcon {...props} name=\"people-sharp\" />,\n            }}\n          />\n          <BottomTab.Screen\n            name=\"SettingsTab\"\n            component={SettingsTab}\n            options={{\n              tabBarIcon: (props) => <TabBarIcon {...props} name=\"settings-sharp\" />,\n            }}\n          />\n        </BottomTab.Navigator>\n        <View style={{ height: insets?.bottom }} backgroundColor={Colors[colorScheme].background} />\n      </>\n    );\n  }\n\n  return <SafeAreaInsetsContext.Consumer>{renderTabs}</SafeAreaInsetsContext.Consumer>;\n}\n\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\nconst ExploreTabStack = createStackNavigator<ExploreTabParamList>();\nconst SettingsTabStack = createStackNavigator<SettingsTabParamList>();\nconst PortifolioTabStack = createStackNavigator<PortifolioTabParamList>();\nconst MoveTabStack = createStackNavigator<MoveTabParamList>();\n\nfunction ExploreTab() {\n  return (\n    <ExploreTabStack.Navigator>\n      <ExploreTabStack.Screen\n        name=\"ExploreScreen\"\n        component={ExploreScreen}\n        options={{ headerTitle: 'Explore', ...headerStyle }}\n      />\n    </ExploreTabStack.Navigator>\n  );\n}\n\nfunction SettingsTab() {\n  return (\n    <SettingsTabStack.Navigator>\n      <SettingsTabStack.Screen\n        name=\"SettingsScreen\"\n        component={SettingsScreen}\n        options={{ headerTitle: 'Settings', ...headerStyle }}\n      />\n    </SettingsTabStack.Navigator>\n  );\n}\nfunction PortifolioTab() {\n  return (\n    <PortifolioTabStack.Navigator>\n      <PortifolioTabStack.Screen\n        name=\"PortifolioScreen\"\n        component={PortifolioScreen}\n        options={{ headerTitle: 'Portfolio', ...headerStyle }}\n      />\n    </PortifolioTabStack.Navigator>\n  );\n}\n\nfunction MoveTab() {\n  return (\n    <MoveTabStack.Navigator>\n      <MoveTabStack.Screen\n        name=\"MoveScreen\"\n        component={MoveScreen}\n        options={{ headerTitle: 'Move', ...headerStyle }}\n      />\n    </MoveTabStack.Navigator>\n  );\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport * as Linking from 'expo-linking';\nimport { Coin } from 'store';\n\nexport default {\n  prefixes: [Linking.makeUrl('/anchor-usd-app/')],\n  config: {\n    screens: {\n      Login: '/login',\n      Register: '/register',\n      Root: {\n        screens: {\n          ExploreTab: {\n            screens: {\n              ExploreScreen: '/',\n            },\n          },\n          PortifolioTab: {\n            screens: {\n              PortifolioScreen: '/portifolio',\n            },\n          },\n          MoveTab: {\n            screens: {\n              MoveScreen: '/move',\n            },\n          },\n          SettingsTab: {\n            screens: {\n              SettingsScreen: '/settings',\n            },\n          },\n        },\n      },\n      ViewCoin: {\n        path: '/coins/:coin',\n        parse: {\n          coin: (id: string): Coin => ({\n            id: Number(id),\n            name: '--',\n            coinname: '--',\n            fullname: '--',\n            description: '--',\n            symbol: '--',\n            image: '',\n            image_url: '',\n            usd_price: 0,\n            usd_change_pct_day: 0,\n            usd_change_pct_24_hours: 0,\n            usd_change_pct_hour: 0,\n            historic: [],\n            created_at: '',\n            updated_at: '',\n          }),\n        },\n        stringify: {\n          coin: (coin: Coin) => coin.id.toString(),\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","/**\n * If you are not familiar with React Navigation, check out the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport * as React from 'react';\nimport { ColorSchemeName, Pressable, View } from 'react-native';\nimport { IconButton } from 'react-native-paper';\nimport { useSelector } from 'react-redux';\n\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer, DefaultTheme, DarkTheme, Link } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport WebBackButton from 'components/WebBackButton';\nimport Metrics from 'constants/Metrics';\nimport LoginScreen from 'screens/LoginScreen';\nimport NotFoundScreen from 'screens/NotFoundScreen';\nimport RegisterScreen from 'screens/RegisterScreen';\nimport ViewCoinScreen from 'screens/ViewCoinScreen';\nimport { isWeb } from 'services/helpers-service';\nimport { selectApiToken } from 'store';\nimport { headerGreenStyle } from 'styles/globalStyles';\nimport { PublicStackParamList, RootStackParamList } from 'types';\n\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}\n    >\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\nconst RootStack = createStackNavigator<RootStackParamList>();\nconst PublicStack = createStackNavigator<PublicStackParamList>();\n\nfunction RootNavigator() {\n  const api_token = useSelector(selectApiToken);\n\n  if (!api_token) {\n    return (\n      <PublicStack.Navigator screenOptions={{ headerShown: false }}>\n        <PublicStack.Screen name=\"Login\" component={LoginScreen} />\n        <PublicStack.Screen name=\"Register\" component={RegisterScreen} />\n      </PublicStack.Navigator>\n    );\n  }\n\n  return (\n    <RootStack.Navigator>\n      <RootStack.Screen\n        name=\"Root\"\n        component={BottomTabNavigator}\n        options={{\n          headerShown: false,\n          title: 'Explore',\n        }}\n      />\n      <RootStack.Screen\n        name=\"ViewCoin\"\n        component={ViewCoinScreen}\n        options={{\n          headerShown: true,\n          title: '',\n          ...headerGreenStyle,\n          ...(isWeb() ? { headerLeft: WebBackButton } : {}),\n        }}\n      />\n      <RootStack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </RootStack.Navigator>\n  );\n}\n","import React from 'react';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider as StoreProvider } from 'react-redux';\n\nimport { StatusBar } from 'expo-status-bar';\nimport useCachedResources from 'hooks/useCachedResources';\nimport useColorScheme from 'hooks/useColorScheme';\nimport Navigation from 'navigation';\nimport useStore from 'store';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const store = useStore();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete || !store) {\n    return null;\n  }\n\n  return (\n    <SafeAreaProvider>\n      <StoreProvider store={store}>\n        <PaperProvider>\n          <Navigation colorScheme={colorScheme} />\n        </PaperProvider>\n      </StoreProvider>\n      <StatusBar />\n    </SafeAreaProvider>\n  );\n}\n","import * as React from 'react';\n\nimport { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          // eslint-disable-next-line global-require\n          'space-mono': require('../../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}